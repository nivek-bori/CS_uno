Convention: 
1. Caps titles describe reward functions being described
2. Numbers show thinking process, largest numbers are most complete thought
3. alphas show sub thinking, notes

Notation:
1. r[x] is the reward for playing card x
2. p(x) is the points required to fulfill condition x
3. V_i is based on next to act. V_1 is next to act after hero. V_2 is next next to act after nero
3. (+) means reward benefits hero, (-) means reward costs hero, (/) means neutral

1. Villian win points is -1 * hero reward

Idea: Minimize your hand's score, maximize your opponents hands score
Idea: Maximize your potential win score, minimize your opponents potential win score

Play large cards (non-special), play cards that your opponent cant play

DEALS w/ HERO AND OPP CARD POINTS
	1. r[card] += p(card) 												// (+) Reward of removing scoring points from hero hand

	1. Mimimizing V gain based on thier play off our play
		How does V1 losing points affect V_i?
		a. V_i doesn't V1 losing points when they are going to win, the reward of V1 losing points V_i perspective is -r_V1(card) * win%(V_i)
		b. We dont like V_i to gain, so r[card] -= -r_V1(card) * win%(V_i)
		c. We dont like V1 to lost points when we are going to win
			r[card] -= r_V1(card) 			// Minimize win points H loses
			r[card] -= r_V1(card) * win%(V_1) 	// Minimize win points V1 gains scaled by V1 win%
			r[card] += r_V1(card) * win%(V_i) 	// Maximize win points V_i loses scaled by V_i win%
	4. Full function
		for card in hand:
			double r_card = -1 * r_V1(card) * win%(V_1)
			for V_i in villans:
				r_card -= -r_V1(card) * win%(V_i)
			r[card] += r_card
	5. Test Case Matching (b)
		If V2 is close to winning, we actually want to reduce V1 hand points in order to reduce V2 win points

		If all win% are matching, what then? 


DEALS w/ BEING ABLE TO PLAY CARD
	1. r(hand) -= p(change_color) * hand(#colors)								
	2. r(hand) -= #colors(hand) * ave( draws to find ( card(color switcher card) - card(+4) ) * ave( p(deck) )
	3. Turning r(hand) into r[card]
		r[card] -= #colors(hand - card) * ave( draws to find( card(col_switcher) - card(+4) ) * ave( p(deck) )
	4. Full function: Accounting for cost of changing color
		double C = ave( draws to find( card(col_switcher) - card(+4) ) * ave( p(deck) )
		for card in hand:
			r[card] -= #colors(hand - card) * C
	5. Test Case Matching
		community = Y3, hand = [Y1, B2, B8, B9]
		r[hand] = [-(1 * C), -(2 * C), -(2 * C), -(2 * C)] -> play Y1

		Or is it better to play off large groups of colors and then switch to smaller ones?
		a. Play off large groups -> Many small groups -> Many color switcher cards required
		b. Play off small groups -> Many large groups -> Requires unbroken chain of color, col_switchers help with this
		Concl: option b is more optimal and full function matches that

required functions:
	ave( draws required to find (card(color_switcher) - card(+4) )
	ave( deck card points )

	r(card) = -1 * valid(card, card_i) * %(card_i) * p(card_i)
	valid(card, card_i) = 0: if non-valid card, 1: if valid card

CASES:
	pos(i+1) has uno -> +2, +4, 
